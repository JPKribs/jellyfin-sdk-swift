//
// DlnaServerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class DlnaServerAPI {
    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConnectionManager(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getConnectionManagerWithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/ConnectionManager
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getConnectionManagerWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/ConnectionManager"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConnectionManager2(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getConnectionManager2WithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/ConnectionManager/ConnectionManager
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getConnectionManager2WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/ConnectionManager/ConnectionManager"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConnectionManager3(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getConnectionManager3WithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/ConnectionManager/ConnectionManager.xml
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getConnectionManager3WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets Dlna content directory xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentDirectory(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getContentDirectoryWithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna content directory xml.
     - GET /Dlna/{serverId}/ContentDirectory
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getContentDirectoryWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/ContentDirectory"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets Dlna content directory xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentDirectory2(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getContentDirectory2WithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna content directory xml.
     - GET /Dlna/{serverId}/ContentDirectory/ContentDirectory
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getContentDirectory2WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/ContentDirectory/ContentDirectory"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets Dlna content directory xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentDirectory3(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getContentDirectory3WithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna content directory xml.
     - GET /Dlna/{serverId}/ContentDirectory/ContentDirectory.xml
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getContentDirectory3WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Description Xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDescriptionXml(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getDescriptionXmlWithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Description Xml.
     - GET /Dlna/{serverId}/description
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getDescriptionXmlWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/description"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Description Xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDescriptionXml2(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getDescriptionXml2WithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Description Xml.
     - GET /Dlna/{serverId}/description.xml
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getDescriptionXml2WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/description.xml"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a server icon.
     
     - parameter fileName: (path) The icon filename. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIcon(fileName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getIconWithRequestBuilder(fileName: fileName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a server icon.
     - GET /Dlna/icons/{fileName}
     - parameter fileName: (path) The icon filename. 
     - returns: RequestBuilder<URL> 
     */
    open class func getIconWithRequestBuilder(fileName: String) -> RequestBuilder<URL> {
        var path = "/Dlna/icons/{fileName}"
        let fileNamePreEscape = "\(APIHelper.mapValueToPathItem(fileName))"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a server icon.
     
     - parameter serverId: (path) Server UUID. 
     - parameter fileName: (path) The icon filename. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIconId(serverId: String, fileName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getIconIdWithRequestBuilder(serverId: serverId, fileName: fileName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a server icon.
     - GET /Dlna/{serverId}/icons/{fileName}
     - parameter serverId: (path) Server UUID. 
     - parameter fileName: (path) The icon filename. 
     - returns: RequestBuilder<URL> 
     */
    open class func getIconIdWithRequestBuilder(serverId: String, fileName: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/icons/{fileName}"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(APIHelper.mapValueToPathItem(fileName))"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMediaReceiverRegistrar(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getMediaReceiverRegistrarWithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/MediaReceiverRegistrar
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getMediaReceiverRegistrarWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/MediaReceiverRegistrar"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMediaReceiverRegistrar2(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getMediaReceiverRegistrar2WithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getMediaReceiverRegistrar2WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMediaReceiverRegistrar3(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getMediaReceiverRegistrar3WithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getMediaReceiverRegistrar3WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Process a connection manager control request.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func processConnectionManagerControlRequest(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        processConnectionManagerControlRequestWithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Process a connection manager control request.
     - POST /Dlna/{serverId}/ConnectionManager/Control
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func processConnectionManagerControlRequestWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/ConnectionManager/Control"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Process a content directory control request.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func processContentDirectoryControlRequest(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        processContentDirectoryControlRequestWithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Process a content directory control request.
     - POST /Dlna/{serverId}/ContentDirectory/Control
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func processContentDirectoryControlRequestWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/ContentDirectory/Control"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Process a media receiver registrar control request.
     
     - parameter serverId: (path) Server UUID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func processMediaReceiverRegistrarControlRequest(serverId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        processMediaReceiverRegistrarControlRequestWithRequestBuilder(serverId: serverId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Process a media receiver registrar control request.
     - POST /Dlna/{serverId}/MediaReceiverRegistrar/Control
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func processMediaReceiverRegistrarControlRequestWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var path = "/Dlna/{serverId}/MediaReceiverRegistrar/Control"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
