// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TranscodingInfo: Codable {
    public var audioChannels: Int?
    public var audioCodec: String?
    public var bitrate: Int?
    public var completionPercentage: Double?
    public var container: String?
    public var framerate: Double?
    public var hardwareAccelerationType: HardwareEncodingType?
    public var height: Int?
    public var isAudioDirect: Bool?
    public var isVideoDirect: Bool?
    public var transcodeReasons: TranscodeReasons?
    public var videoCodec: String?
    public var width: Int?

    public enum TranscodeReasons: String, Codable, CaseIterable {
        case containerNotSupported = "ContainerNotSupported"
        case videoCodecNotSupported = "VideoCodecNotSupported"
        case audioCodecNotSupported = "AudioCodecNotSupported"
        case subtitleCodecNotSupported = "SubtitleCodecNotSupported"
        case audioIsExternal = "AudioIsExternal"
        case secondaryAudioNotSupported = "SecondaryAudioNotSupported"
        case videoProfileNotSupported = "VideoProfileNotSupported"
        case videoLevelNotSupported = "VideoLevelNotSupported"
        case videoResolutionNotSupported = "VideoResolutionNotSupported"
        case videoBitDepthNotSupported = "VideoBitDepthNotSupported"
        case videoFramerateNotSupported = "VideoFramerateNotSupported"
        case refFramesNotSupported = "RefFramesNotSupported"
        case anamorphicVideoNotSupported = "AnamorphicVideoNotSupported"
        case interlacedVideoNotSupported = "InterlacedVideoNotSupported"
        case audioChannelsNotSupported = "AudioChannelsNotSupported"
        case audioProfileNotSupported = "AudioProfileNotSupported"
        case audioSampleRateNotSupported = "AudioSampleRateNotSupported"
        case audioBitDepthNotSupported = "AudioBitDepthNotSupported"
        case containerBitrateExceedsLimit = "ContainerBitrateExceedsLimit"
        case videoBitrateNotSupported = "VideoBitrateNotSupported"
        case audioBitrateNotSupported = "AudioBitrateNotSupported"
        case unknownVideoStreamInfo = "UnknownVideoStreamInfo"
        case unknownAudioStreamInfo = "UnknownAudioStreamInfo"
        case directPlayError = "DirectPlayError"
        case videoRangeTypeNotSupported = "VideoRangeTypeNotSupported"
    }

    public init(audioChannels: Int? = nil, audioCodec: String? = nil, bitrate: Int? = nil, completionPercentage: Double? = nil, container: String? = nil, framerate: Double? = nil, hardwareAccelerationType: HardwareEncodingType? = nil, height: Int? = nil, isAudioDirect: Bool? = nil, isVideoDirect: Bool? = nil, transcodeReasons: TranscodeReasons? = nil, videoCodec: String? = nil, width: Int? = nil) {
        self.audioChannels = audioChannels
        self.audioCodec = audioCodec
        self.bitrate = bitrate
        self.completionPercentage = completionPercentage
        self.container = container
        self.framerate = framerate
        self.hardwareAccelerationType = hardwareAccelerationType
        self.height = height
        self.isAudioDirect = isAudioDirect
        self.isVideoDirect = isVideoDirect
        self.transcodeReasons = transcodeReasons
        self.videoCodec = videoCodec
        self.width = width
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.audioChannels = try values.decodeIfPresent(Int.self, forKey: "AudioChannels")
        self.audioCodec = try values.decodeIfPresent(String.self, forKey: "AudioCodec")
        self.bitrate = try values.decodeIfPresent(Int.self, forKey: "Bitrate")
        self.completionPercentage = try values.decodeIfPresent(Double.self, forKey: "CompletionPercentage")
        self.container = try values.decodeIfPresent(String.self, forKey: "Container")
        self.framerate = try values.decodeIfPresent(Double.self, forKey: "Framerate")
        self.hardwareAccelerationType = try values.decodeIfPresent(HardwareEncodingType.self, forKey: "HardwareAccelerationType")
        self.height = try values.decodeIfPresent(Int.self, forKey: "Height")
        self.isAudioDirect = try values.decodeIfPresent(Bool.self, forKey: "IsAudioDirect")
        self.isVideoDirect = try values.decodeIfPresent(Bool.self, forKey: "IsVideoDirect")
        self.transcodeReasons = try values.decodeIfPresent(TranscodeReasons.self, forKey: "TranscodeReasons")
        self.videoCodec = try values.decodeIfPresent(String.self, forKey: "VideoCodec")
        self.width = try values.decodeIfPresent(Int.self, forKey: "Width")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(audioChannels, forKey: "AudioChannels")
        try values.encodeIfPresent(audioCodec, forKey: "AudioCodec")
        try values.encodeIfPresent(bitrate, forKey: "Bitrate")
        try values.encodeIfPresent(completionPercentage, forKey: "CompletionPercentage")
        try values.encodeIfPresent(container, forKey: "Container")
        try values.encodeIfPresent(framerate, forKey: "Framerate")
        try values.encodeIfPresent(hardwareAccelerationType, forKey: "HardwareAccelerationType")
        try values.encodeIfPresent(height, forKey: "Height")
        try values.encodeIfPresent(isAudioDirect, forKey: "IsAudioDirect")
        try values.encodeIfPresent(isVideoDirect, forKey: "IsVideoDirect")
        try values.encodeIfPresent(transcodeReasons, forKey: "TranscodeReasons")
        try values.encodeIfPresent(videoCodec, forKey: "VideoCodec")
        try values.encodeIfPresent(width, forKey: "Width")
    }
}
