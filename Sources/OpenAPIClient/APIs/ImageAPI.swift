//
// ImageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ImageAPI {
    /**
     Delete an item's image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (query) The image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteItemImage(itemId: UUID, imageType: ImageType, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteItemImageWithRequestBuilder(itemId: itemId, imageType: imageType, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an item's image.
     - DELETE /Items/{itemId}/Images/{imageType}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (query) The image index. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemImageWithRequestBuilder(itemId: UUID, imageType: ImageType, imageIndex: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{itemId}/Images/{imageType}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete an item's image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) The image index. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteItemImageByIndex(itemId: UUID, imageType: ImageType, imageIndex: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteItemImageByIndexWithRequestBuilder(itemId: itemId, imageType: imageType, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an item's image.
     - DELETE /Items/{itemId}/Images/{imageType}/{imageIndex}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) The image index. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemImageByIndexWithRequestBuilder(itemId: UUID, imageType: ImageType, imageIndex: Int) -> RequestBuilder<Void> {
        var path = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete the user's image.
     
     - parameter userId: (path) User Id. 
     - parameter imageType: (path) (Unused) Image type. 
     - parameter index: (query) (Unused) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserImage(userId: UUID, imageType: ImageType, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteUserImageWithRequestBuilder(userId: userId, imageType: imageType, index: index).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete the user's image.
     - DELETE /Users/{userId}/Images/{imageType}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (path) User Id. 
     - parameter imageType: (path) (Unused) Image type. 
     - parameter index: (query) (Unused) Image index. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserImageWithRequestBuilder(userId: UUID, imageType: ImageType, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{userId}/Images/{imageType}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "index": index?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete the user's image.
     
     - parameter userId: (path) User Id. 
     - parameter imageType: (path) (Unused) Image type. 
     - parameter index: (path) (Unused) Image index. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserImageByIndex(userId: UUID, imageType: ImageType, index: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteUserImageByIndexWithRequestBuilder(userId: userId, imageType: imageType, index: index).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete the user's image.
     - DELETE /Users/{userId}/Images/{imageType}/{index}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (path) User Id. 
     - parameter imageType: (path) (Unused) Image type. 
     - parameter index: (path) (Unused) Image index. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserImageByIndexWithRequestBuilder(userId: UUID, imageType: ImageType, index: Int) -> RequestBuilder<Void> {
        var path = "/Users/{userId}/Images/{imageType}/{index}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get artist image by name.
     
     - parameter name: (path) Artist name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArtistImage(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getArtistImageWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get artist image by name.
     - GET /Artists/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Artist name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getArtistImageWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Artists/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get genre image by name.
     
     - parameter name: (path) Genre name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenreImage(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getGenreImageWithRequestBuilder(name: name, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get genre image by name.
     - GET /Genres/{name}/Images/{imageType}
     - parameter name: (path) Genre name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getGenreImageWithRequestBuilder(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Genres/{name}/Images/{imageType}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get genre image by name.
     
     - parameter name: (path) Genre name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenreImageByIndex(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getGenreImageByIndexWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get genre image by name.
     - GET /Genres/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Genre name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getGenreImageByIndexWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Genres/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the item's image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter format: (query) Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemImage(itemId: UUID, imageType: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, format: ImageFormat? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getItemImageWithRequestBuilder(itemId: itemId, imageType: imageType, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, tag: tag, cropWhitespace: cropWhitespace, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets the item's image.
     - GET /Items/{itemId}/Images/{imageType}
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter format: (query) Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getItemImageWithRequestBuilder(itemId: UUID, imageType: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, format: ImageFormat? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Items/{itemId}/Images/{imageType}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the item's image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output format of the image - original,gif,jpg,png. 
     - parameter percentPlayed: (path) Optional. Percent to render for the percent played overlay. 
     - parameter unplayedCount: (path) Optional. Unplayed count overlay to render. 
     - parameter imageIndex: (path) Image index. 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemImage2(itemId: UUID, imageType: ImageType, maxWidth: Int, maxHeight: Int, tag: String, format: ImageFormat, percentPlayed: Double, unplayedCount: Int, imageIndex: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getItemImage2WithRequestBuilder(itemId: itemId, imageType: imageType, maxWidth: maxWidth, maxHeight: maxHeight, tag: tag, format: format, percentPlayed: percentPlayed, unplayedCount: unplayedCount, imageIndex: imageIndex, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets the item's image.
     - GET /Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output format of the image - original,gif,jpg,png. 
     - parameter percentPlayed: (path) Optional. Percent to render for the percent played overlay. 
     - parameter unplayedCount: (path) Optional. Unplayed count overlay to render. 
     - parameter imageIndex: (path) Image index. 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getItemImage2WithRequestBuilder(itemId: UUID, imageType: ImageType, maxWidth: Int, maxHeight: Int, tag: String, format: ImageFormat, percentPlayed: Double, unplayedCount: Int, imageIndex: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let maxWidthPreEscape = "\(APIHelper.mapValueToPathItem(maxWidth))"
        let maxWidthPostEscape = maxWidthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{maxWidth}", with: maxWidthPostEscape, options: .literal, range: nil)
        let maxHeightPreEscape = "\(APIHelper.mapValueToPathItem(maxHeight))"
        let maxHeightPostEscape = maxHeightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{maxHeight}", with: maxHeightPostEscape, options: .literal, range: nil)
        let tagPreEscape = "\(APIHelper.mapValueToPathItem(tag))"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tag}", with: tagPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(APIHelper.mapValueToPathItem(format))"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let percentPlayedPreEscape = "\(APIHelper.mapValueToPathItem(percentPlayed))"
        let percentPlayedPostEscape = percentPlayedPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{percentPlayed}", with: percentPlayedPostEscape, options: .literal, range: nil)
        let unplayedCountPreEscape = "\(APIHelper.mapValueToPathItem(unplayedCount))"
        let unplayedCountPostEscape = unplayedCountPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{unplayedCount}", with: unplayedCountPostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the item's image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter format: (query) Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemImageByIndex(itemId: UUID, imageType: ImageType, imageIndex: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, format: ImageFormat? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getItemImageByIndexWithRequestBuilder(itemId: itemId, imageType: imageType, imageIndex: imageIndex, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, tag: tag, cropWhitespace: cropWhitespace, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets the item's image.
     - GET /Items/{itemId}/Images/{imageType}/{imageIndex}
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter format: (query) Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getItemImageByIndexWithRequestBuilder(itemId: UUID, imageType: ImageType, imageIndex: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, format: ImageFormat? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get item image infos.
     
     - parameter itemId: (path) Item id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemImageInfos(itemId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ImageInfo]?, _ error: Error?) -> Void)) {
        getItemImageInfosWithRequestBuilder(itemId: itemId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get item image infos.
     - GET /Items/{itemId}/Images
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - returns: RequestBuilder<[ImageInfo]> 
     */
    open class func getItemImageInfosWithRequestBuilder(itemId: UUID) -> RequestBuilder<[ImageInfo]> {
        var path = "/Items/{itemId}/Images"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ImageInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get music genre image by name.
     
     - parameter name: (path) Music genre name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMusicGenreImage(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getMusicGenreImageWithRequestBuilder(name: name, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get music genre image by name.
     - GET /MusicGenres/{name}/Images/{imageType}
     - parameter name: (path) Music genre name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getMusicGenreImageWithRequestBuilder(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/MusicGenres/{name}/Images/{imageType}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get music genre image by name.
     
     - parameter name: (path) Music genre name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMusicGenreImageByIndex(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getMusicGenreImageByIndexWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get music genre image by name.
     - GET /MusicGenres/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Music genre name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getMusicGenreImageByIndexWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get person image by name.
     
     - parameter name: (path) Person name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPersonImage(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getPersonImageWithRequestBuilder(name: name, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get person image by name.
     - GET /Persons/{name}/Images/{imageType}
     - parameter name: (path) Person name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getPersonImageWithRequestBuilder(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Persons/{name}/Images/{imageType}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get person image by name.
     
     - parameter name: (path) Person name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPersonImageByIndex(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getPersonImageByIndexWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get person image by name.
     - GET /Persons/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Person name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getPersonImageByIndexWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Persons/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get studio image by name.
     
     - parameter name: (path) Studio name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStudioImage(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getStudioImageWithRequestBuilder(name: name, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get studio image by name.
     - GET /Studios/{name}/Images/{imageType}
     - parameter name: (path) Studio name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getStudioImageWithRequestBuilder(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Studios/{name}/Images/{imageType}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get studio image by name.
     
     - parameter name: (path) Studio name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStudioImageByIndex(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getStudioImageByIndexWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get studio image by name.
     - GET /Studios/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Studio name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getStudioImageByIndexWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Studios/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get user profile image.
     
     - parameter userId: (path) User id. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserImage(userId: UUID, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getUserImageWithRequestBuilder(userId: userId, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user profile image.
     - GET /Users/{userId}/Images/{imageType}
     - parameter userId: (path) User id. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getUserImageWithRequestBuilder(userId: UUID, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Users/{userId}/Images/{imageType}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get user profile image.
     
     - parameter userId: (path) User id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserImageByIndex(userId: UUID, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getUserImageByIndexWithRequestBuilder(userId: userId, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user profile image.
     - GET /Users/{userId}/Images/{imageType}/{imageIndex}
     - parameter userId: (path) User id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getUserImageByIndexWithRequestBuilder(userId: UUID, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Users/{userId}/Images/{imageType}/{imageIndex}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get artist image by name.
     
     - parameter name: (path) Artist name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headArtistImage(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headArtistImageWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get artist image by name.
     - HEAD /Artists/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Artist name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headArtistImageWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Artists/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get genre image by name.
     
     - parameter name: (path) Genre name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headGenreImage(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headGenreImageWithRequestBuilder(name: name, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get genre image by name.
     - HEAD /Genres/{name}/Images/{imageType}
     - parameter name: (path) Genre name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headGenreImageWithRequestBuilder(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Genres/{name}/Images/{imageType}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get genre image by name.
     
     - parameter name: (path) Genre name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headGenreImageByIndex(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headGenreImageByIndexWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get genre image by name.
     - HEAD /Genres/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Genre name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headGenreImageByIndexWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Genres/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the item's image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter format: (query) Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headItemImage(itemId: UUID, imageType: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, format: ImageFormat? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headItemImageWithRequestBuilder(itemId: itemId, imageType: imageType, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, tag: tag, cropWhitespace: cropWhitespace, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets the item's image.
     - HEAD /Items/{itemId}/Images/{imageType}
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter format: (query) Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headItemImageWithRequestBuilder(itemId: UUID, imageType: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, format: ImageFormat? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Items/{itemId}/Images/{imageType}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the item's image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output format of the image - original,gif,jpg,png. 
     - parameter percentPlayed: (path) Optional. Percent to render for the percent played overlay. 
     - parameter unplayedCount: (path) Optional. Unplayed count overlay to render. 
     - parameter imageIndex: (path) Image index. 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headItemImage2(itemId: UUID, imageType: ImageType, maxWidth: Int, maxHeight: Int, tag: String, format: ImageFormat, percentPlayed: Double, unplayedCount: Int, imageIndex: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headItemImage2WithRequestBuilder(itemId: itemId, imageType: imageType, maxWidth: maxWidth, maxHeight: maxHeight, tag: tag, format: format, percentPlayed: percentPlayed, unplayedCount: unplayedCount, imageIndex: imageIndex, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets the item's image.
     - HEAD /Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output format of the image - original,gif,jpg,png. 
     - parameter percentPlayed: (path) Optional. Percent to render for the percent played overlay. 
     - parameter unplayedCount: (path) Optional. Unplayed count overlay to render. 
     - parameter imageIndex: (path) Image index. 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headItemImage2WithRequestBuilder(itemId: UUID, imageType: ImageType, maxWidth: Int, maxHeight: Int, tag: String, format: ImageFormat, percentPlayed: Double, unplayedCount: Int, imageIndex: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let maxWidthPreEscape = "\(APIHelper.mapValueToPathItem(maxWidth))"
        let maxWidthPostEscape = maxWidthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{maxWidth}", with: maxWidthPostEscape, options: .literal, range: nil)
        let maxHeightPreEscape = "\(APIHelper.mapValueToPathItem(maxHeight))"
        let maxHeightPostEscape = maxHeightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{maxHeight}", with: maxHeightPostEscape, options: .literal, range: nil)
        let tagPreEscape = "\(APIHelper.mapValueToPathItem(tag))"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tag}", with: tagPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(APIHelper.mapValueToPathItem(format))"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let percentPlayedPreEscape = "\(APIHelper.mapValueToPathItem(percentPlayed))"
        let percentPlayedPostEscape = percentPlayedPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{percentPlayed}", with: percentPlayedPostEscape, options: .literal, range: nil)
        let unplayedCountPreEscape = "\(APIHelper.mapValueToPathItem(unplayedCount))"
        let unplayedCountPostEscape = unplayedCountPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{unplayedCount}", with: unplayedCountPostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the item's image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter format: (query) Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headItemImageByIndex(itemId: UUID, imageType: ImageType, imageIndex: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, format: ImageFormat? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headItemImageByIndexWithRequestBuilder(itemId: itemId, imageType: imageType, imageIndex: imageIndex, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, tag: tag, cropWhitespace: cropWhitespace, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets the item's image.
     - HEAD /Items/{itemId}/Images/{imageType}/{imageIndex}
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter format: (query) Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headItemImageByIndexWithRequestBuilder(itemId: UUID, imageType: ImageType, imageIndex: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, format: ImageFormat? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get music genre image by name.
     
     - parameter name: (path) Music genre name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headMusicGenreImage(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headMusicGenreImageWithRequestBuilder(name: name, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get music genre image by name.
     - HEAD /MusicGenres/{name}/Images/{imageType}
     - parameter name: (path) Music genre name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headMusicGenreImageWithRequestBuilder(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/MusicGenres/{name}/Images/{imageType}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get music genre image by name.
     
     - parameter name: (path) Music genre name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headMusicGenreImageByIndex(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headMusicGenreImageByIndexWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get music genre image by name.
     - HEAD /MusicGenres/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Music genre name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headMusicGenreImageByIndexWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get person image by name.
     
     - parameter name: (path) Person name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headPersonImage(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headPersonImageWithRequestBuilder(name: name, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get person image by name.
     - HEAD /Persons/{name}/Images/{imageType}
     - parameter name: (path) Person name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headPersonImageWithRequestBuilder(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Persons/{name}/Images/{imageType}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get person image by name.
     
     - parameter name: (path) Person name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headPersonImageByIndex(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headPersonImageByIndexWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get person image by name.
     - HEAD /Persons/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Person name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headPersonImageByIndexWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Persons/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get studio image by name.
     
     - parameter name: (path) Studio name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headStudioImage(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headStudioImageWithRequestBuilder(name: name, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get studio image by name.
     - HEAD /Studios/{name}/Images/{imageType}
     - parameter name: (path) Studio name. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headStudioImageWithRequestBuilder(name: String, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Studios/{name}/Images/{imageType}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get studio image by name.
     
     - parameter name: (path) Studio name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headStudioImageByIndex(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headStudioImageByIndexWithRequestBuilder(name: name, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get studio image by name.
     - HEAD /Studios/{name}/Images/{imageType}/{imageIndex}
     - parameter name: (path) Studio name. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headStudioImageByIndexWithRequestBuilder(name: String, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Studios/{name}/Images/{imageType}/{imageIndex}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get user profile image.
     
     - parameter userId: (path) User id. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headUserImage(userId: UUID, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headUserImageWithRequestBuilder(userId: userId, imageType: imageType, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, imageIndex: imageIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user profile image.
     - HEAD /Users/{userId}/Images/{imageType}
     - parameter userId: (path) User id. 
     - parameter imageType: (path) Image type. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter imageIndex: (query) Image index. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headUserImageWithRequestBuilder(userId: UUID, imageType: ImageType, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, imageIndex: Int? = nil) -> RequestBuilder<URL> {
        var path = "/Users/{userId}/Images/{imageType}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
            "imageIndex": imageIndex?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get user profile image.
     
     - parameter userId: (path) User id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headUserImageByIndex(userId: UUID, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        headUserImageByIndexWithRequestBuilder(userId: userId, imageType: imageType, imageIndex: imageIndex, tag: tag, format: format, maxWidth: maxWidth, maxHeight: maxHeight, percentPlayed: percentPlayed, unplayedCount: unplayedCount, width: width, height: height, quality: quality, fillWidth: fillWidth, fillHeight: fillHeight, cropWhitespace: cropWhitespace, addPlayedIndicator: addPlayedIndicator, blur: blur, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user profile image.
     - HEAD /Users/{userId}/Images/{imageType}/{imageIndex}
     - parameter userId: (path) User id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Image index. 
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter format: (query) Determines the output format of the image - original,gif,jpg,png. (optional)
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter percentPlayed: (query) Optional. Percent to render for the percent played overlay. (optional)
     - parameter unplayedCount: (query) Optional. Unplayed count overlay to render. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter fillWidth: (query) Width of box to fill. (optional)
     - parameter fillHeight: (query) Height of box to fill. (optional)
     - parameter cropWhitespace: (query) Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator. (optional)
     - parameter blur: (query) Optional. Blur image. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func headUserImageByIndexWithRequestBuilder(userId: UUID, imageType: ImageType, imageIndex: Int, tag: String? = nil, format: ImageFormat? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, fillWidth: Int? = nil, fillHeight: Int? = nil, cropWhitespace: Bool? = nil, addPlayedIndicator: Bool? = nil, blur: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<URL> {
        var path = "/Users/{userId}/Images/{imageType}/{imageIndex}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag?.encodeToJSON(),
            "format": format?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "percentPlayed": percentPlayed?.encodeToJSON(),
            "unplayedCount": unplayedCount?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "quality": quality?.encodeToJSON(),
            "fillWidth": fillWidth?.encodeToJSON(),
            "fillHeight": fillHeight?.encodeToJSON(),
            "cropWhitespace": cropWhitespace?.encodeToJSON(),
            "addPlayedIndicator": addPlayedIndicator?.encodeToJSON(),
            "blur": blur?.encodeToJSON(),
            "backgroundColor": backgroundColor?.encodeToJSON(),
            "foregroundLayer": foregroundLayer?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Sets the user image.
     
     - parameter userId: (path) User Id. 
     - parameter imageType: (path) (Unused) Image type. 
     - parameter index: (query) (Unused) Image index. (optional)
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserImage(userId: UUID, imageType: ImageType, index: Int? = nil, body: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        postUserImageWithRequestBuilder(userId: userId, imageType: imageType, index: index, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sets the user image.
     - POST /Users/{userId}/Images/{imageType}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (path) User Id. 
     - parameter imageType: (path) (Unused) Image type. 
     - parameter index: (query) (Unused) Image index. (optional)
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postUserImageWithRequestBuilder(userId: UUID, imageType: ImageType, index: Int? = nil, body: URL? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{userId}/Images/{imageType}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "index": index?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Sets the user image.
     
     - parameter userId: (path) User Id. 
     - parameter imageType: (path) (Unused) Image type. 
     - parameter index: (path) (Unused) Image index. 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserImageByIndex(userId: UUID, imageType: ImageType, index: Int, body: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        postUserImageByIndexWithRequestBuilder(userId: userId, imageType: imageType, index: index, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sets the user image.
     - POST /Users/{userId}/Images/{imageType}/{index}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (path) User Id. 
     - parameter imageType: (path) (Unused) Image type. 
     - parameter index: (path) (Unused) Image index. 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postUserImageByIndexWithRequestBuilder(userId: UUID, imageType: ImageType, index: Int, body: URL? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{userId}/Images/{imageType}/{index}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Set item image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setItemImage(itemId: UUID, imageType: ImageType, body: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        setItemImageWithRequestBuilder(itemId: itemId, imageType: imageType, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set item image.
     - POST /Items/{itemId}/Images/{imageType}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setItemImageWithRequestBuilder(itemId: UUID, imageType: ImageType, body: URL? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{itemId}/Images/{imageType}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Set item image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) (Unused) Image index. 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setItemImageByIndex(itemId: UUID, imageType: ImageType, imageIndex: Int, body: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        setItemImageByIndexWithRequestBuilder(itemId: itemId, imageType: imageType, imageIndex: imageIndex, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set item image.
     - POST /Items/{itemId}/Images/{imageType}/{imageIndex}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) (Unused) Image index. 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setItemImageByIndexWithRequestBuilder(itemId: UUID, imageType: ImageType, imageIndex: Int, body: URL? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates the index for an item image.
     
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Old image index. 
     - parameter newIndex: (query) New image index. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateItemImageIndex(itemId: UUID, imageType: ImageType, imageIndex: Int, newIndex: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        updateItemImageIndexWithRequestBuilder(itemId: itemId, imageType: imageType, imageIndex: imageIndex, newIndex: newIndex).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates the index for an item image.
     - POST /Items/{itemId}/Images/{imageType}/{imageIndex}/Index
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - parameter imageType: (path) Image type. 
     - parameter imageIndex: (path) Old image index. 
     - parameter newIndex: (query) New image index. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateItemImageIndexWithRequestBuilder(itemId: UUID, imageType: ImageType, imageIndex: Int, newIndex: Int) -> RequestBuilder<Void> {
        var path = "/Items/{itemId}/Images/{imageType}/{imageIndex}/Index"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let imageTypePreEscape = "\(APIHelper.mapValueToPathItem(imageType))"
        let imageTypePostEscape = imageTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageType}", with: imageTypePostEscape, options: .literal, range: nil)
        let imageIndexPreEscape = "\(APIHelper.mapValueToPathItem(imageIndex))"
        let imageIndexPostEscape = imageIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageIndex}", with: imageIndexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "newIndex": newIndex.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
