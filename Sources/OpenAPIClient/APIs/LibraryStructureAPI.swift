//
// LibraryStructureAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class LibraryStructureAPI {
    /**
     Add a media path to a library.
     
     - parameter mediaPathDto: (body) The media path dto. 
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addMediaPath(mediaPathDto: MediaPathDto, refreshLibrary: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        addMediaPathWithRequestBuilder(mediaPathDto: mediaPathDto, refreshLibrary: refreshLibrary).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a media path to a library.
     - POST /Library/VirtualFolders/Paths
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter mediaPathDto: (body) The media path dto. 
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func addMediaPathWithRequestBuilder(mediaPathDto: MediaPathDto, refreshLibrary: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Paths"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaPathDto)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Adds a virtual folder.
     
     - parameter name: (query) The name of the virtual folder. (optional)
     - parameter collectionType: (query) The type of the collection. (optional)
     - parameter paths: (query) The paths of the virtual folder. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - parameter addVirtualFolderDto: (body) The library options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addVirtualFolder(name: String? = nil, collectionType: String? = nil, paths: [String]? = nil, refreshLibrary: Bool? = nil, addVirtualFolderDto: AddVirtualFolderDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        addVirtualFolderWithRequestBuilder(name: name, collectionType: collectionType, paths: paths, refreshLibrary: refreshLibrary, addVirtualFolderDto: addVirtualFolderDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds a virtual folder.
     - POST /Library/VirtualFolders
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the virtual folder. (optional)
     - parameter collectionType: (query) The type of the collection. (optional)
     - parameter paths: (query) The paths of the virtual folder. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - parameter addVirtualFolderDto: (body) The library options. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func addVirtualFolderWithRequestBuilder(name: String? = nil, collectionType: String? = nil, paths: [String]? = nil, refreshLibrary: Bool? = nil, addVirtualFolderDto: AddVirtualFolderDto? = nil) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addVirtualFolderDto)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "collectionType": collectionType?.encodeToJSON(),
            "paths": paths?.encodeToJSON(),
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets all virtual folders.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVirtualFolders(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [VirtualFolderInfo]?, _ error: Error?) -> Void)) {
        getVirtualFoldersWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets all virtual folders.
     - GET /Library/VirtualFolders
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[VirtualFolderInfo]> 
     */
    open class func getVirtualFoldersWithRequestBuilder() -> RequestBuilder<[VirtualFolderInfo]> {
        let path = "/Library/VirtualFolders"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[VirtualFolderInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove a media path.
     
     - parameter name: (query) The name of the library. (optional)
     - parameter path: (query) The path to remove. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeMediaPath(name: String? = nil, path: String? = nil, refreshLibrary: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        removeMediaPathWithRequestBuilder(name: name, path: path, refreshLibrary: refreshLibrary).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a media path.
     - DELETE /Library/VirtualFolders/Paths
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the library. (optional)
     - parameter path: (query) The path to remove. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func removeMediaPathWithRequestBuilder(name: String? = nil, path: String? = nil, refreshLibrary: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Paths"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "path": path.encodeToJSON(),
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Removes a virtual folder.
     
     - parameter name: (query) The name of the folder. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeVirtualFolder(name: String? = nil, refreshLibrary: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        removeVirtualFolderWithRequestBuilder(name: name, refreshLibrary: refreshLibrary).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Removes a virtual folder.
     - DELETE /Library/VirtualFolders
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the folder. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func removeVirtualFolderWithRequestBuilder(name: String? = nil, refreshLibrary: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Renames a virtual folder.
     
     - parameter name: (query) The name of the virtual folder. (optional)
     - parameter newName: (query) The new name. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func renameVirtualFolder(name: String? = nil, newName: String? = nil, refreshLibrary: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        renameVirtualFolderWithRequestBuilder(name: name, newName: newName, refreshLibrary: refreshLibrary).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Renames a virtual folder.
     - POST /Library/VirtualFolders/Name
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the virtual folder. (optional)
     - parameter newName: (query) The new name. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func renameVirtualFolderWithRequestBuilder(name: String? = nil, newName: String? = nil, refreshLibrary: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Name"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "newName": newName?.encodeToJSON(),
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update library options.
     
     - parameter updateLibraryOptionsDto: (body) The library name and options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateLibraryOptions(updateLibraryOptionsDto: UpdateLibraryOptionsDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        updateLibraryOptionsWithRequestBuilder(updateLibraryOptionsDto: updateLibraryOptionsDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update library options.
     - POST /Library/VirtualFolders/LibraryOptions
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter updateLibraryOptionsDto: (body) The library name and options. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateLibraryOptionsWithRequestBuilder(updateLibraryOptionsDto: UpdateLibraryOptionsDto? = nil) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/LibraryOptions"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateLibraryOptionsDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates a media path.
     
     - parameter name: (query) The name of the library. (optional)
     - parameter mediaPathInfo: (body) The path info. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMediaPath(name: String? = nil, mediaPathInfo: MediaPathInfo? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        updateMediaPathWithRequestBuilder(name: name, mediaPathInfo: mediaPathInfo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a media path.
     - POST /Library/VirtualFolders/Paths/Update
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the library. (optional)
     - parameter mediaPathInfo: (body) The path info. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateMediaPathWithRequestBuilder(name: String? = nil, mediaPathInfo: MediaPathInfo? = nil) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Paths/Update"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaPathInfo)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
